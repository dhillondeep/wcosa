#!/bin/bash
#!/usr/bin/env bash

set -o errexit
trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR
set -o errtrace
set -o pipefail
DEFAULT_IFS="${IFS}"
SAFER_IFS=$'\n\t'
IFS="${SAFER_IFS}"
_ME=$(basename "${0}")

_print_help() {
  cat <<HEREDOC
                 __               .__
__  _  _______ _/  |_  ___________|  |   ____   ____ ______
\\ \\/ \\/ /\\__  \\\\   __\\/ __ \\_  __ \\  |  /  _ \\ /  _ \\\\____ \\
 \\     /  / __ \\|  | \\  ___/|  | \\/  |_(  <_> |  <_> )  |_> >
  \\/\\_/  (____  /__|  \\___  >__|  |____/\\____/ \\____/|   __/
              \\/          \\/                         |__|
Waterloop code base builder
HEREDOC
}

#### Variables ####
GO_VERSION=1.10
TRAVIS=false

_build() {
    make build
}

_clean() {
    make clean
}

_get() {
    make get
}

_linux_setup() {
    # Check go version
    command -v go > /dev/null 2>&1 || {
        echo 'go is not installed';
        exit 1;
    }
    go version | grep ${GO_VERSION} &> /dev/null
    if [ $? != 0 ] ; then
        echo 'go version 1.10.x is required';
        exit 1;
    fi

    printf "Retrieving dependencies...\n"
    make get

    printf "Installing system library... "
    go get golang.org/x/sys/unix
    printf "Done!\n"

    printf "Getting govendor dependencies... "
    govendor sync
    printf "Done!\n"

    printf "Installing gotools..."
    if [ "$TRAVIS" = false ] ; then
        go get -u golang.org/x/tools/...
    fi
    printf "Done!\n"

    printf "Getting toolchain (Submodules)... "
    git submodule update --init --recursive
    printf "Done!\n"

    printf "Linking toolchain... "
    mkdir -p ./bin
    rm -rf $(pwd)/bin/toolchain
    ln -s -f $(pwd)/toolchain $(pwd)/bin/toolchain
    printf "Done!\n"

    printf "Linking test vendor packages... "
    cd tests
    ./symlinks.sh
    cd ..
    printf "Done!\n"
}

_format() {
    command -v goimports > /dev/null 2>&1 || {
        echo 'goimports is not installed';
        exit 1;
    }
    command -v vim > /dev/null 2>&1 || {
        echo 'vim is not installed';
        exit 1;
    }

    printf "Running gofmt... "
    find $(pwd)/cmd -type f -name "*.go" -exec \
        goimports -w {} \;
    printf "Done!\nRunning retab... "
    find $(pwd)/cmd -type f -name "*.go" -exec \
        vim -e -s +"set tabstop=4 shiftwidth=4 expandtab | retab | %s/\s\+$//e | wq" {} \;
    printf "Done!\n"
}

_simple() {
    root_dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
    root_dir_name=$(basename "$root_dir")
    cd "$root_dir"

    if [ "$1" == 'build' ] ; then
        echo "Building project"
        _build
    elif [ "$1" == 'clean' ] ; then
        echo "Cleaning project"
        _clean
    elif [ "$1" == 'get' ] ; then
        echo "Getting packages"
        _get
    elif [ "$1" == 'linux-setup' ] ; then
        echo "Setting up environment for Linux"
        _linux_setup
    elif [ "$1" == 'mac-setup' ]; then
        echo "Setting up environment for Mac OS"
        _linux_setup
    elif [ "$1" == 'travis-setup' ] ; then
        echo "Setting up environment for Travis CI"
        TRAVIS=true
        _linux_setup
    elif [ "$1" == 'format' ] ; then
        echo "Formatting wio codebase"
        _format
    else
        _print_help
    fi
}

_main() {
  # Avoid complex option parsing when only one program option is expected.
  if [[ "${1:-}" =~ ^-h|--help$  ]] || [ $# -lt "1" ]
  then
    _print_help
  else
    _simple "$@"
  fi
}

_main "$@"
