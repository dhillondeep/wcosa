#!/bin/bash -e
#!/usr/bin/env bash

CUR_DIR=$(cd -P -- "$(dirname -- "$0")" && pwd -P)

OS_TYPE=undefined
GCC_AVR_STATUS=undefined

export COSA_DIR=$CUR_DIR/platform/cosa
export GCC_AVR_VER=gcc-avr-4.2

BOARDS_TXT_LOC=$COSA_DIR/build/boards.txt
WMAKE_LOCK=$CUR_DIR/wmake.lock
WMAKE_CONF=$CUR_DIR/wmake.ini
SRC_DIR="$CUR_DIR/src"
MAIN_CPP=$SRC_DIR/main.cpp

set -o nounset
set -o errexit

trap 'echo "Aborting due to errexit on line $LINENO. Exit code: $?" >&2' ERR

set -o errtrace
set -o pipefail

DEFAULT_IFS="${IFS}"
SAFER_IFS=$'\n\t'
IFS="${SAFER_IFS}"

_ME=$(basename "${0}")

_print_help() {
  cat <<HEREDOC
                 __               .__
__  _  _______ _/  |_  ___________|  |   ____   ____ ______
\ \/ \/ /\__  \\   __\/ __ \_  __  \\  |  /  _ \ /  _ \\\____ \\
 \     /  / __ \|  | \  ___/|  | \/  |_(  <_> |  <_> )  |_> >
  \/\_/  (____  /__|  \___  >__|  |____/\____/ \____/|   __/
              \/          \/                         |__|
The Embedded C++ code base builder
Usage:
  ${_ME} [help] [boards]
Options:
  help               Show this screen.
  boards             Show available boards.
  build              Build the project
HEREDOC
}

# Function runs to ensure the environment is correctly
# setup for Cosa builds.
# 1. Initializes submodules
# 2. Checks that `boards.txt` exists and is not empty
# 3. Verifies installation of `gcc-avr`
_pre() {
  # Check out submodules
  git submodule update --init

  # Create wmake.lock
  if [ ! -f $WMAKE_LOCK ] ; then
    touch $WMAKE_LOCK
  fi

  # Read lock file and store variables
  while IFS= read -r line
  do
    while IFS='=' read -ra ADDR; do
      if [ ${ADDR[0]} == "ostype" ] ; then
        OS_TYPE=${ADDR[1]}
      elif [ ${ADDR[0]} == "gccavrstatus" ] ; then
        GCC_AVR_STATUS=${ADDR[1]}
      fi
    done <<< "$line"
  done < "$WMAKE_LOCK"

  # Check OS identification
  if [ $OS_TYPE == "undefined" ] ; then
    echo "Identifying OS Type"
    if [[ "$OSTYPE" == "linux-gnu" ]] ; then
      OS_TYPE="linux"
    elif [[ "$OSTYPE" == "darwin"* ]] ; then
      OS_TYPE="macos"
    else
      echo "Supported OS: Linux, MacOS"
      exit 1
    fi
    if [ ! $OS_TYPE == "undefined" ] ; then
      echo "ostype=$OS_TYPE" >> $WMAKE_LOCK
    fi
  fi

  # Check dependency status
  if [ $GCC_AVR_STATUS == "undefined" ] ; then
    echo "Checking for dependencies"
    if [[ $OS_TYPE == 'linux' ]] ; then
      echo "Checking apt-get for gcc-avr, avr-libc, avrdude"
      #sudo apt-get install gcc-avr avr-libc avrdude
    elif [[ $OS_TYPE == 'macos' ]] ; then
      xcode-select --install || :
      echo "Checking HomeBrew for avr-gcc"
      brew tap osx-cross/avr
      brew install avr-gcc
    fi
    GCC_AVR_STATUS=ready
    echo "Dependencies all set!"
    echo "gccavrstatus=$GCC_AVR_STATUS" >> $WMAKE_LOCK
  fi

  # Create boards.txt
  if [ ! -f $BOARDS_TXT_LOC ] ; then
    touch $BOARDS_TXT_LOC
  fi
  if [ ! -s $BOARDS_TXT_LOC ] ; then
    echo "Generating standard boards.txt"
    cat $COSA_DIR/boards.txt > $BOARDS_TXT_LOC
  fi
}

WMAKE_BOARD=undefined
BUILD_FLAGS=undefined
_config() {
  if [ ! -f $WMAKE_CONF ] ; then
    echo "Unable to find config file wmake.ini"
    exit 1
  fi
  while IFS= read -r line
  do
    while IFS='=' read -ra ADDR; do
      if [ ${ADDR[0]} == "board" ] ; then
        WMAKE_BOARD=${ADDR[1]}
      elif [ ${ADDR[0]} == "buildflags" ] ; then
        BUILD_FLAGS=${ADDR[1]}
      fi
    done <<< "$line"
  done < "$WMAKE_CONF"
  if [ $WMAKE_BOARD == "undefined" ] ; then
    echo "Undefined board for build"
    exit 1
  else
    echo "Configuring build for board [$WMAKE_BOARD]"
  fi
  if [ $BUILD_FLAGS == "undefined" ] ; then
    BUILD_FLAGS=
  else
    echo "Using build flags [$BUILD_FLAGS]"
  fi
}

_check_src_main() {
  if [ ! -d "$SRC_DIR" ] ; then
    echo "Unable to find source directory \"src\""
    exit 1
  fi
  if [ ! -f "$MAIN_CPP" ] ; then
    echo "Unable to find main file \"src/main.cpp\""
    exit 1
  fi
}

_build_compile() {
  _config
  _check_src_main
  echo $WMAKE_BOARD
  (cd "$SRC_DIR" && "$COSA_DIR/build/cosa" $WMAKE_BOARD)
}

_build_upload() {
  _config
  _check_src_main
  (cd "$SRC_DIR" && "$COSA_DIR/build/cosa" $WMAKE_BOARD upload)
}

_build_clean() {
  _config
  (cd $SRC_DIR && $COSA_DIR/build/cosa $WMAKE_BOARD clean)
}

_monitor() {
  _config
  (cd $SRC_DIR && $COSA_DIR/build/cosa $WMAKE_BOARD monitor)
}

_simple() {
  root_dir=$(cd -P -- "$(dirname -- "$0")" && pwd -P)
  root_dir_name=$(basename "$root_dir")
  cd "$root_dir"

  if [ "$1" == 'boards' ] ; then
    (cd $COSA_DIR/build && ./cosa boards)
  elif [ "$1" == 'build' ] ; then
    _build_compile
  elif [ "$1" == 'upload' ] ; then
    _build_upload
  elif [ "$1" == 'clean' ] ; then
    _build_clean
  elif [ "$1" == 'monitor' ] ; then
    _monitor
  else
    _print_help
  fi
}

_main() {
  if [[ "${1:-}" =~ ^h|help$  ]] || [ $# -lt "1" ] ; then
    _print_help
  else
    _simple "$@"
  fi
}

_pre
_main "$@"
